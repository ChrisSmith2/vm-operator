/* **********************************************************
 * Copyright 2019 VMware, Inc.  All rights reserved. -- VMware Confidential
 * **********************************************************/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	time "time"

	vmoperatorv1alpha1 "gitlab.eng.vmware.com/iaas-platform/vm-operator/pkg/apis/vmoperator/v1alpha1"
	clientset "gitlab.eng.vmware.com/iaas-platform/vm-operator/pkg/client/clientset_generated/clientset"
	internalinterfaces "gitlab.eng.vmware.com/iaas-platform/vm-operator/pkg/client/informers_generated/externalversions/internalinterfaces"
	v1alpha1 "gitlab.eng.vmware.com/iaas-platform/vm-operator/pkg/client/listers_generated/vmoperator/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// VirtualMachineImageInformer provides access to a shared informer and lister for
// VirtualMachineImages.
type VirtualMachineImageInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.VirtualMachineImageLister
}

type virtualMachineImageInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewVirtualMachineImageInformer constructs a new informer for VirtualMachineImage type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewVirtualMachineImageInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredVirtualMachineImageInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredVirtualMachineImageInformer constructs a new informer for VirtualMachineImage type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredVirtualMachineImageInformer(client clientset.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VmoperatorV1alpha1().VirtualMachineImages(namespace).List(options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.VmoperatorV1alpha1().VirtualMachineImages(namespace).Watch(options)
			},
		},
		&vmoperatorv1alpha1.VirtualMachineImage{},
		resyncPeriod,
		indexers,
	)
}

func (f *virtualMachineImageInformer) defaultInformer(client clientset.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredVirtualMachineImageInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *virtualMachineImageInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&vmoperatorv1alpha1.VirtualMachineImage{}, f.defaultInformer)
}

func (f *virtualMachineImageInformer) Lister() v1alpha1.VirtualMachineImageLister {
	return v1alpha1.NewVirtualMachineImageLister(f.Informer().GetIndexer())
}
